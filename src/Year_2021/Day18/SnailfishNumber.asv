classdef SnailfishNumber < handle
    properties
        myTree;
        debugflag;
    end
    
    methods
        
        function obj = SnailfishNumber()
            debugflag = 0;
        end
        
        function obj = UnpackString(obj,input_string)
            [left_child,right_child] = obj.decode_snail_string(input_string);
            
            obj.myTree = OrionTree(left_child,right_child);
        end
        
        function setTree(obj,tree_in)
            obj.myTree = tree_in;
        end
        
        function [left_child,right_child] = decode_snail_string(obj,input_string)
            [str_left,str_right] = obj.split_snail_string(input_string);
            
            if length(str_left)==1
                left_child = str2num(str_left);
            else
                [Lchild1,Lchild2] = obj.decode_snail_string(str_left);
                
                left_child = OrionTree(Lchild1,Lchild2);
            end
            
            if length(str_right)==1
                right_child = str2num(str_right);
            else
                [Rchild1,Rchild2] = obj.decode_snail_string(str_right);
                
                right_child = OrionTree(Rchild1,Rchild2);
            end
        end
        
        function [str_left,str_right] = split_snail_string(obj,input_string)
            %get rid of outer parentheses
            input_string = input_string(2:(end-1));
            
            %identify index of the comma
            depth = 0;
            comma_index = 1;
            
            %the splitting comma is at parentheses depth 0
            while depth<0 || input_string(comma_index)~=','
                %open bracket means we go deeper into the tree
                if input_string(comma_index)=='['
                    depth = depth-1;
                end
                %close bracket means we travel back towards root of tree
                if input_string(comma_index)==']'
                    depth = depth+1;
                end
                
                comma_index = comma_index+1;
            end
     
            str_left = input_string(1:(comma_index-1));
            str_right = input_string((comma_index+1):end);
        end
        
        function [found_flag,bit_code] = find_leftmost_explode_target(obj)
            [found_flag,bit_code] = obj.find_leftmost_explode_target_recursive([],obj.myTree);
        end
        
        %red_type == 0 means no explosion/splitting necessary
        %red_type == 1 means explosion is necessary
        %red_type == 2 means split is necessary
        function [found_flag,bit_code] = find_leftmost_explode_target_recursive(obj,bit_code,inspection_target)
            if isa(inspection_target,'double')
                %if the current element we are looking at is a number....
                
                found_flag = 0;
                bit_code = [];
            else
                %if the current element we are looking at is a pair...
  
                if length(bit_code)==4
                    %if the pair is nested in four pairs then tell system
                    %that we need to explode the pair
                    
                    found_flag = 1;
                else
                    %otherwise, check to see if children need reduction
                    
                    %first, check the left child/subtree for a reduction target
                    [potential_found_flag, potential_bit_code] = obj.find_leftmost_explode_target_recursive([bit_code,0],inspection_target.left_child);
                    
                    
                    if potential_found_flag
                        %if we find something in left subtree, return it
                        found_flag = potential_found_flag;
                        bit_code = potential_bit_code;
                    else
                        %otherwise, check the right subtree
                        [found_flag,bit_code] = obj.find_leftmost_explode_target_recursive([bit_code,1],inspection_target.right_child);
                    end
                end
            end
        end
        
        function [found_flag,bit_code] = find_leftmost_split_target(obj)
            [found_flag,bit_code] = obj.find_leftmost_explode_target_recursive([],obj.myTree);
        end
        
        %red_type == 0 means no explosion/splitting necessary
        %red_type == 1 means explosion is necessary
        %red_type == 2 means split is necessary
        function [found_flag,bit_code] = find_leftmost_explode_target_recursive(obj,bit_code,inspection_target)
            if isa(inspection_target,'double')
                %if the current element we are looking at is a number....
                
                found_flag = 0;
                bit_code = [];
            else
                %if the current element we are looking at is a pair...
  
                if length(bit_code)==4
                    %if the pair is nested in four pairs then tell system
                    %that we need to explode the pair
                    
                    found_flag = 1;
                else
                    %otherwise, check to see if children need reduction
                    
                    %first, check the left child/subtree for a reduction target
                    [potential_found_flag, potential_bit_code] = obj.find_leftmost_explode_target_recursive([bit_code,0],inspection_target.left_child);
                    
                    
                    if potential_found_flag
                        %if we find something in left subtree, return it
                        found_flag = potential_found_flag;
                        bit_code = potential_bit_code;
                    else
                        %otherwise, check the right subtree
                        [found_flag,bit_code] = obj.find_leftmost_explode_target_recursive([bit_code,1],inspection_target.right_child);
                    end
                end
            end
        end
        
%         function [bit_code,red_type] = find_leftmost_reduction_target(obj)
%             [bit_code,red_type] = obj.find_leftmost_reduction_target_recursive([],obj.myTree);
%         end
%         
%         %red_type == 0 means no explosion/splitting necessary
%         %red_type == 1 means explosion is necessary
%         %red_type == 2 means split is necessary
%         function [bit_code,red_type] = find_leftmost_reduction_target_recursive(obj,bit_code,inspection_target)
%             if isa(inspection_target,'double')
%                 %if the current element we are looking at is a number....
%                 
%                 if inspection_target>=10
%                     %tell system to split it if value is greater than 10
%                     red_type = 2;
%                 else
%                     %do nothing otherwise
%                     red_type = 0;
%                 end
%             else
%                 %if the current element we are looking at is a pair...
%   
%                 if length(bit_code)==4
%                     %if the pair is nested in four pairs then tell system
%                     %that we need to explode the pair
%                     
%                     red_type = 1;
%                 else
%                     %otherwise, check to see if children need reduction
%                     
%                     %first, check the left child/subtree for a reduction target
%                     [potential_bit_code,potential_red_type] = obj.find_leftmost_reduction_target_recursive([bit_code,0],inspection_target.left_child);
%                     
%                     
%                     if potential_red_type~=0
%                         %if we find something in left subtree, return it
%                         red_type = potential_red_type;
%                         bit_code = potential_bit_code;
%                     else
%                         %otherwise, check the right subtree
%                         [bit_code,red_type] = obj.find_leftmost_reduction_target_recursive([bit_code,1],inspection_target.right_child);
%                     end
%                 end
%             end
%         end
        
        function [found_flag,bit_code_out] = find_closest_left_number(obj,bit_code)
            count = length(bit_code);
            while count>0 && bit_code(count)==0
                count = count-1;
            end
            
            if count==0
                found_flag = 0;
                bit_code_out = []; 
            else
                bit_code = bit_code(1:count);
                bit_code(count)=0;
                value_out = obj.get_value(bit_code);
                
                while ~isa(value_out,'double')
                    bit_code = [bit_code,1];
                    value_out = value_out.right_child;
                end
                found_flag = 1;
                bit_code_out = bit_code;
            end
        end
        
        function [found_flag,bit_code_out] = find_closest_right_number(obj,bit_code)
            count = length(bit_code);
            while count>0 && bit_code(count)==1
                count = count-1;
            end
            
            if count==0
                found_flag = 0;
                bit_code_out = []; 
            else
                bit_code = bit_code(1:count);
                bit_code(count)=1;
                value_out = obj.get_value(bit_code);
                
                while ~isa(value_out,'double')
                    bit_code = [bit_code,0];
                    value_out = value_out.left_child;
                end
                found_flag = 1;
                bit_code_out = bit_code;
            end
        end
        
        function value_out = compute_magnitude(obj)
            value_out = obj.compute_magnitude_recursive(obj.myTree);
        end
        
        function value_out = compute_magnitude_recursive(obj,inspection_target)
            if isa(inspection_target,'double')
                value_out = inspection_target;
            else
                value_out = 3*obj.compute_magnitude_recursive(inspection_target.left_child)...
                           +2*obj.compute_magnitude_recursive(inspection_target.right_child);
            end
        end
        
        function find_and_print_reduction_target(obj)
            [bit_code,red_type] = obj.find_leftmost_reduction_target();
            obj.print_reduction_target(bit_code,red_type)
        end
        
        
        function print_reduction_target(obj,bit_code,red_type)
            if red_type==0
                'no reduction needed'
            else
                obj.print_reduction_target_recursive(obj.myTree,bit_code,red_type);
            end
        end
        
        function print_reduction_target_recursive(obj,inspection_target,bit_code,red_type)
            if length(bit_code)>0
                if bit_code(1)==0
                    obj.print_reduction_target_recursive(inspection_target.left_child,bit_code(2:end),red_type);
                else
                    obj.print_reduction_target_recursive(inspection_target.right_child,bit_code(2:end),red_type);
                end
            else
                if red_type==1
                    'explode'
                    [inspection_target.left_child,inspection_target.right_child]
                end
                
                if red_type==2
                    'split'
                    inspection_target
                end
            end
        end
        
        function newSnailfishNumber = addOperation(obj,right_number)
            newSnailfishNumber=SnailfishNumber();
            newSnailfishNumber.debugflag = obj.debugflag;
            
            newSnailfishNumber.setTree(OrionTree(obj.myTree,right_number.myTree));
            newSnailfishNumber.reduce_number();
        end
        
        function reduce_number(obj)
            reduction_possible = 1;
            if obj.debugflag
                disp(obj.generate_SnailfishNumber_string())
            end
            
            while reduction_possible == 1
                [bit_code,red_type] = obj.find_leftmost_reduction_target();
                
                if red_type==0
                    reduction_possible = 0;
                end
                
                if red_type==1
                    obj.explode_pair(bit_code);
                end
                
                if red_type==2
                    obj.split_number(bit_code);
                end

                if obj.debugflag
                    disp(obj.generate_SnailfishNumber_string())
                end
            
            end
        end
        
        function explode_pair(obj,bit_code)
%             obj.generate_SnailfishNumber_string()
            
            
            
            pair_value_left = obj.get_value([bit_code,0]);
            pair_value_right = obj.get_value([bit_code,1]);
            
            status_string = ['[',num2str(pair_value_left),',',num2str(pair_value_right),']'];
            
            obj.set_value(bit_code,0);
            
            [found_flag_left,bit_code_left] = obj.find_closest_left_number(bit_code);
            if found_flag_left
                value_left = obj.get_value(bit_code_left);
                obj.set_value(bit_code_left,value_left+pair_value_left);
                
                status_string = [num2str(value_left),' ,  ',status_string];
%                 'closest left value'
%                 value_left
            end
                
            [found_flag_right,bit_code_right] = obj.find_closest_right_number(bit_code);
            if found_flag_right
                value_right = obj.get_value(bit_code_right);
                obj.set_value(bit_code_right,value_right+pair_value_right);
                
                status_string = [status_string,' ,  ',num2str(value_right)];
%                 'closest right value'
%                 value_right
            end
            status_string = ['Exploding: ',status_string];
            if obj.debugflag
                disp(status_string)
            end
        end
        
        function split_number(obj,bit_code)
            number_value = obj.get_value(bit_code);
            status_string = ['Splitting: ',num2str(number_value),', [',num2str(floor(number_value/2)),',',num2str(ceil(number_value/2)),']'];
            obj.set_value(bit_code,OrionTree(floor(number_value/2),ceil(number_value/2)));
            if obj.debugflag
                disp(status_string)
            end
        end
        
        function value_out = get_value(obj,bit_code)
            value_out = obj.get_value_recursive(obj.myTree,bit_code);
        end
        
        function value_out = get_value_recursive(obj,inspection_target,bit_code)
            if length(bit_code)>0
                if bit_code(1)==0
                    value_out = obj.get_value_recursive(inspection_target.left_child,bit_code(2:end));
                else
                    value_out = obj.get_value_recursive(inspection_target.right_child,bit_code(2:end));
                end
            else
                value_out = inspection_target;
            end
        end
        
        function set_value(obj,bit_code,value_in)
            obj.set_value_recursive(obj.myTree,bit_code,value_in);
        end
        
        function set_value_recursive(obj,inspection_target,bit_code,value_in)
            if length(bit_code)>1
                if bit_code(1)==0
                    obj.set_value_recursive(inspection_target.left_child,bit_code(2:end),value_in);
                else
                    obj.set_value_recursive(inspection_target.right_child,bit_code(2:end),value_in);
                end
            else
                if bit_code(1)==0
                    inspection_target.left_child = value_in;
                else
                    inspection_target.right_child = value_in;
                end
            end
        end
        
        function print_regular_number(obj,bit_code)
            obj.print_regular_number_recursive(obj.myTree,bit_code);
        end
        
        function print_regular_number_recursive(obj,inspection_target,bit_code)
            if length(bit_code)>0
                if bit_code(1)==0
                    obj.print_regular_number_recursive(inspection_target.left_child,bit_code(2:end));
                else
                    obj.print_regular_number_recursive(inspection_target.right_child,bit_code(2:end));
                end
            else
                if isa(inspection_target,'double')
                    inspection_target
                else
                    'not a regular number!'
                end
            end
        end
        
        function str_out = generate_SnailfishNumber_string(obj)
            str_out = obj.generate_SnailfishNumber_string_recursive(obj.myTree);
        end
        
        function str_out = generate_SnailfishNumber_string_recursive(obj,inspection_target)
            if isa(inspection_target,'double')
                str_out = num2str(inspection_target);
            else
                str_left = obj.generate_SnailfishNumber_string_recursive(inspection_target.left_child);
                str_right = obj.generate_SnailfishNumber_string_recursive(inspection_target.right_child);
                str_out = ['[',str_left,',',str_right,']'];
            end
        end
    end
end